def GenerateConfig(context):
  """Generate YAML resource configuration."""
                    'autoscaling': {
                      'enabled': False
                  },
                  'management': {
                                                                       [ Read 97 lines ]
^G Get Help      ^O Write Out     ^W Where Is      ^K Cut Text      ^J Justify       ^C Cur Pos       ^Y Prev Page     M-\ First Line   M-W WhereIs Next
^X Exit          ^R Read File     ^\ Replace       ^U Uncut Text    ^T To Linter     ^_ Go To

  cluster_name = context.properties['cluster_name']
  cluster_region = context.properties['cluster_region']
  number_of_nodes = context.properties['num_nodes']

  resources = []
  outputs = []

  resources.append({
      'name': cluster_name,
      'type': 'gcp-types/container-v1beta1:projects.locations.clusters',
      'properties': {
          'parent': 'projects/{}/locations/{}'.format(context.env['project'], cluster_region),
          'cluster': {
              'name': cluster_name,
              'nodePools': [{
                  'name': 'core',
                  'initialNodeCount': number_of_nodes,
                  'config': {
                      'imageType': 'COS',
                      'preemptible': True,
                      'oauthScopes': [
                          'https://www.googleapis.com/auth/' + scope
                          for scope in [
                              'compute',
                              'devstorage.read_only',
                              'logging.write',
                              'monitoring'
                          ]
                      ]
                  },
                  'autoscaling': {
                      'enabled': False
                  },
                  'management': {
                      'autoUpgrade': True,
                      'autoRepair': True,
                      'upgradeOptions': {}
                  }
              }]
          }
      }
  })
  for type_suffix, endpoint in k8s_endpoints.iteritems():
    resources.append({
        'name': type_name + type_suffix,
        'type': 'deploymentmanager.v2beta.typeProvider',
        'properties': {
            'options': {
                'validationOptions': {
                    # Kubernetes API accepts ints, in fields they annotate
                    # with string. This validation will show as warning
                    # rather than failure for Deployment Manager.
                    # https://github.com/kubernetes/kubernetes/issues/2971
                    'schemaValidation': 'IGNORE_WITH_WARNINGS'
                },
                # According to kubernetes spec, the path parameter 'name'
                # should be the value inside the metadata field
                # https://github.com/kubernetes/community/blob/master
                # /contributors/devel/api-conventions.md
                # This mapping specifies that
                'inputMappings': [{
                    'fieldName': 'name',
                    'location': 'PATH',
                    'methodMatch': '^(GET|DELETE|PUT)$',
                    'value': '$.ifNull('
                             '$.resource.properties.metadata.name, '
                             '$.resource.name)'
                }, {
                    'fieldName': 'metadata.name',
                    'location': 'BODY',
                    'methodMatch': '^(PUT|POST)$',
                    'value': '$.ifNull('
                             '$.resource.properties.metadata.name, '
                             '$.resource.name)'
                }, {
                    'fieldName': 'Authorization',
                    'location': 'HEADER',
                    'value': '$.concat("Bearer ",'
                             '$.googleOauth2AccessToken())'
                }]
            },
            'descriptorUrl':
                ''.join([
                    'https://$(ref.', cluster_name, '.endpoint)/swaggerapi/',
                    endpoint
                ])
        }
    })
    outputs.append({
        'name': 'clusterType' + type_suffix,
        'value': type_name + type_suffix
    })

  return {'resources': resources, 'outputs': outputs}
